// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/predicate"
	"project/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserCode sets the "userCode" field.
func (uu *UserUpdate) SetUserCode(s string) *UserUpdate {
	uu.mutation.SetUserCode(s)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetDefaultPassword sets the "defaultPassword" field.
func (uu *UserUpdate) SetDefaultPassword(s string) *UserUpdate {
	uu.mutation.SetDefaultPassword(s)
	return uu
}

// SetIsAdmin sets the "isAdmin" field.
func (uu *UserUpdate) SetIsAdmin(ua user.IsAdmin) *UserUpdate {
	uu.mutation.SetIsAdmin(ua)
	return uu
}

// SetNillableIsAdmin sets the "isAdmin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAdmin(ua *user.IsAdmin) *UserUpdate {
	if ua != nil {
		uu.SetIsAdmin(*ua)
	}
	return uu
}

// ClearIsAdmin clears the value of the "isAdmin" field.
func (uu *UserUpdate) ClearIsAdmin() *UserUpdate {
	uu.mutation.ClearIsAdmin()
	return uu
}

// SetCreateTime sets the "createTime" field.
func (uu *UserUpdate) SetCreateTime(i int64) *UserUpdate {
	uu.mutation.ResetCreateTime()
	uu.mutation.SetCreateTime(i)
	return uu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreateTime(i *int64) *UserUpdate {
	if i != nil {
		uu.SetCreateTime(*i)
	}
	return uu
}

// AddCreateTime adds i to the "createTime" field.
func (uu *UserUpdate) AddCreateTime(i int64) *UserUpdate {
	uu.mutation.AddCreateTime(i)
	return uu
}

// SetLoginTime sets the "loginTime" field.
func (uu *UserUpdate) SetLoginTime(i int64) *UserUpdate {
	uu.mutation.ResetLoginTime()
	uu.mutation.SetLoginTime(i)
	return uu
}

// SetNillableLoginTime sets the "loginTime" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginTime(i *int64) *UserUpdate {
	if i != nil {
		uu.SetLoginTime(*i)
	}
	return uu
}

// AddLoginTime adds i to the "loginTime" field.
func (uu *UserUpdate) AddLoginTime(i int64) *UserUpdate {
	uu.mutation.AddLoginTime(i)
	return uu
}

// ClearLoginTime clears the value of the "loginTime" field.
func (uu *UserUpdate) ClearLoginTime() *UserUpdate {
	uu.mutation.ClearLoginTime()
	return uu
}

// SetAuthList sets the "authList" field.
func (uu *UserUpdate) SetAuthList(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetAuthList(m)
	return uu
}

// ClearAuthList clears the value of the "authList" field.
func (uu *UserUpdate) ClearAuthList() *UserUpdate {
	uu.mutation.ClearAuthList()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.UserCode(); ok {
		if err := user.UserCodeValidator(v); err != nil {
			return &ValidationError{Name: "userCode", err: fmt.Errorf(`ent: validator failed for field "User.userCode": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DefaultPassword(); ok {
		if err := user.DefaultPasswordValidator(v); err != nil {
			return &ValidationError{Name: "defaultPassword", err: fmt.Errorf(`ent: validator failed for field "User.defaultPassword": %w`, err)}
		}
	}
	if v, ok := uu.mutation.IsAdmin(); ok {
		if err := user.IsAdminValidator(v); err != nil {
			return &ValidationError{Name: "isAdmin", err: fmt.Errorf(`ent: validator failed for field "User.isAdmin": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserCode(); ok {
		_spec.SetField(user.FieldUserCode, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.DefaultPassword(); ok {
		_spec.SetField(user.FieldDefaultPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeEnum, value)
	}
	if uu.mutation.IsAdminCleared() {
		_spec.ClearField(user.FieldIsAdmin, field.TypeEnum)
	}
	if value, ok := uu.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedCreateTime(); ok {
		_spec.AddField(user.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedLoginTime(); ok {
		_spec.AddField(user.FieldLoginTime, field.TypeInt64, value)
	}
	if uu.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeInt64)
	}
	if value, ok := uu.mutation.AuthList(); ok {
		_spec.SetField(user.FieldAuthList, field.TypeJSON, value)
	}
	if uu.mutation.AuthListCleared() {
		_spec.ClearField(user.FieldAuthList, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserCode sets the "userCode" field.
func (uuo *UserUpdateOne) SetUserCode(s string) *UserUpdateOne {
	uuo.mutation.SetUserCode(s)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetDefaultPassword sets the "defaultPassword" field.
func (uuo *UserUpdateOne) SetDefaultPassword(s string) *UserUpdateOne {
	uuo.mutation.SetDefaultPassword(s)
	return uuo
}

// SetIsAdmin sets the "isAdmin" field.
func (uuo *UserUpdateOne) SetIsAdmin(ua user.IsAdmin) *UserUpdateOne {
	uuo.mutation.SetIsAdmin(ua)
	return uuo
}

// SetNillableIsAdmin sets the "isAdmin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAdmin(ua *user.IsAdmin) *UserUpdateOne {
	if ua != nil {
		uuo.SetIsAdmin(*ua)
	}
	return uuo
}

// ClearIsAdmin clears the value of the "isAdmin" field.
func (uuo *UserUpdateOne) ClearIsAdmin() *UserUpdateOne {
	uuo.mutation.ClearIsAdmin()
	return uuo
}

// SetCreateTime sets the "createTime" field.
func (uuo *UserUpdateOne) SetCreateTime(i int64) *UserUpdateOne {
	uuo.mutation.ResetCreateTime()
	uuo.mutation.SetCreateTime(i)
	return uuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreateTime(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetCreateTime(*i)
	}
	return uuo
}

// AddCreateTime adds i to the "createTime" field.
func (uuo *UserUpdateOne) AddCreateTime(i int64) *UserUpdateOne {
	uuo.mutation.AddCreateTime(i)
	return uuo
}

// SetLoginTime sets the "loginTime" field.
func (uuo *UserUpdateOne) SetLoginTime(i int64) *UserUpdateOne {
	uuo.mutation.ResetLoginTime()
	uuo.mutation.SetLoginTime(i)
	return uuo
}

// SetNillableLoginTime sets the "loginTime" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginTime(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetLoginTime(*i)
	}
	return uuo
}

// AddLoginTime adds i to the "loginTime" field.
func (uuo *UserUpdateOne) AddLoginTime(i int64) *UserUpdateOne {
	uuo.mutation.AddLoginTime(i)
	return uuo
}

// ClearLoginTime clears the value of the "loginTime" field.
func (uuo *UserUpdateOne) ClearLoginTime() *UserUpdateOne {
	uuo.mutation.ClearLoginTime()
	return uuo
}

// SetAuthList sets the "authList" field.
func (uuo *UserUpdateOne) SetAuthList(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetAuthList(m)
	return uuo
}

// ClearAuthList clears the value of the "authList" field.
func (uuo *UserUpdateOne) ClearAuthList() *UserUpdateOne {
	uuo.mutation.ClearAuthList()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.UserCode(); ok {
		if err := user.UserCodeValidator(v); err != nil {
			return &ValidationError{Name: "userCode", err: fmt.Errorf(`ent: validator failed for field "User.userCode": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DefaultPassword(); ok {
		if err := user.DefaultPasswordValidator(v); err != nil {
			return &ValidationError{Name: "defaultPassword", err: fmt.Errorf(`ent: validator failed for field "User.defaultPassword": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.IsAdmin(); ok {
		if err := user.IsAdminValidator(v); err != nil {
			return &ValidationError{Name: "isAdmin", err: fmt.Errorf(`ent: validator failed for field "User.isAdmin": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UserCode(); ok {
		_spec.SetField(user.FieldUserCode, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.DefaultPassword(); ok {
		_spec.SetField(user.FieldDefaultPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeEnum, value)
	}
	if uuo.mutation.IsAdminCleared() {
		_spec.ClearField(user.FieldIsAdmin, field.TypeEnum)
	}
	if value, ok := uuo.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(user.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedLoginTime(); ok {
		_spec.AddField(user.FieldLoginTime, field.TypeInt64, value)
	}
	if uuo.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeInt64)
	}
	if value, ok := uuo.mutation.AuthList(); ok {
		_spec.SetField(user.FieldAuthList, field.TypeJSON, value)
	}
	if uuo.mutation.AuthListCleared() {
		_spec.ClearField(user.FieldAuthList, field.TypeJSON)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
