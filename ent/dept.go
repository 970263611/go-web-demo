// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project/ent/dept"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Dept is the model entity for the Dept schema.
type Dept struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeptId holds the value of the "deptId" field.
	DeptId string `json:"deptId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ParentId holds the value of the "parentId" field.
	ParentId string `json:"parentId,omitempty"`
	// Ext holds the value of the "ext" field.
	Ext string `json:"ext,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dept) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dept.FieldID:
			values[i] = new(sql.NullInt64)
		case dept.FieldDeptId, dept.FieldName, dept.FieldParentId, dept.FieldExt:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dept", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dept fields.
func (d *Dept) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dept.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dept.FieldDeptId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deptId", values[i])
			} else if value.Valid {
				d.DeptId = value.String
			}
		case dept.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dept.FieldParentId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parentId", values[i])
			} else if value.Valid {
				d.ParentId = value.String
			}
		case dept.FieldExt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext", values[i])
			} else if value.Valid {
				d.Ext = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Dept.
// Note that you need to call Dept.Unwrap() before calling this method if this Dept
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dept) Update() *DeptUpdateOne {
	return (&DeptClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dept entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dept) Unwrap() *Dept {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dept is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dept) String() string {
	var builder strings.Builder
	builder.WriteString("Dept(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("deptId=")
	builder.WriteString(d.DeptId)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("parentId=")
	builder.WriteString(d.ParentId)
	builder.WriteString(", ")
	builder.WriteString("ext=")
	builder.WriteString(d.Ext)
	builder.WriteByte(')')
	return builder.String()
}

// Depts is a parsable slice of Dept.
type Depts []*Dept

func (d Depts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
