// Code generated by ent, DO NOT EDIT.

package dept

import (
	"project/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeptId applies equality check predicate on the "deptId" field. It's identical to DeptIdEQ.
func DeptId(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptId), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// Ext applies equality check predicate on the "ext" field. It's identical to ExtEQ.
func Ext(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExt), v))
	})
}

// DeptIdEQ applies the EQ predicate on the "deptId" field.
func DeptIdEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptId), v))
	})
}

// DeptIdNEQ applies the NEQ predicate on the "deptId" field.
func DeptIdNEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeptId), v))
	})
}

// DeptIdIn applies the In predicate on the "deptId" field.
func DeptIdIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeptId), v...))
	})
}

// DeptIdNotIn applies the NotIn predicate on the "deptId" field.
func DeptIdNotIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeptId), v...))
	})
}

// DeptIdGT applies the GT predicate on the "deptId" field.
func DeptIdGT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeptId), v))
	})
}

// DeptIdGTE applies the GTE predicate on the "deptId" field.
func DeptIdGTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeptId), v))
	})
}

// DeptIdLT applies the LT predicate on the "deptId" field.
func DeptIdLT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeptId), v))
	})
}

// DeptIdLTE applies the LTE predicate on the "deptId" field.
func DeptIdLTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeptId), v))
	})
}

// DeptIdContains applies the Contains predicate on the "deptId" field.
func DeptIdContains(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeptId), v))
	})
}

// DeptIdHasPrefix applies the HasPrefix predicate on the "deptId" field.
func DeptIdHasPrefix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeptId), v))
	})
}

// DeptIdHasSuffix applies the HasSuffix predicate on the "deptId" field.
func DeptIdHasSuffix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeptId), v))
	})
}

// DeptIdEqualFold applies the EqualFold predicate on the "deptId" field.
func DeptIdEqualFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeptId), v))
	})
}

// DeptIdContainsFold applies the ContainsFold predicate on the "deptId" field.
func DeptIdContainsFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeptId), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentId), v))
	})
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldParentId), v...))
	})
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldParentId), v...))
	})
}

// ParentIdGT applies the GT predicate on the "parentId" field.
func ParentIdGT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentId), v))
	})
}

// ParentIdGTE applies the GTE predicate on the "parentId" field.
func ParentIdGTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentId), v))
	})
}

// ParentIdLT applies the LT predicate on the "parentId" field.
func ParentIdLT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentId), v))
	})
}

// ParentIdLTE applies the LTE predicate on the "parentId" field.
func ParentIdLTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentId), v))
	})
}

// ParentIdContains applies the Contains predicate on the "parentId" field.
func ParentIdContains(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentId), v))
	})
}

// ParentIdHasPrefix applies the HasPrefix predicate on the "parentId" field.
func ParentIdHasPrefix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentId), v))
	})
}

// ParentIdHasSuffix applies the HasSuffix predicate on the "parentId" field.
func ParentIdHasSuffix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentId), v))
	})
}

// ParentIdIsNil applies the IsNil predicate on the "parentId" field.
func ParentIdIsNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentId)))
	})
}

// ParentIdNotNil applies the NotNil predicate on the "parentId" field.
func ParentIdNotNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentId)))
	})
}

// ParentIdEqualFold applies the EqualFold predicate on the "parentId" field.
func ParentIdEqualFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentId), v))
	})
}

// ParentIdContainsFold applies the ContainsFold predicate on the "parentId" field.
func ParentIdContainsFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentId), v))
	})
}

// ExtEQ applies the EQ predicate on the "ext" field.
func ExtEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExt), v))
	})
}

// ExtNEQ applies the NEQ predicate on the "ext" field.
func ExtNEQ(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExt), v))
	})
}

// ExtIn applies the In predicate on the "ext" field.
func ExtIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExt), v...))
	})
}

// ExtNotIn applies the NotIn predicate on the "ext" field.
func ExtNotIn(vs ...string) predicate.Dept {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExt), v...))
	})
}

// ExtGT applies the GT predicate on the "ext" field.
func ExtGT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExt), v))
	})
}

// ExtGTE applies the GTE predicate on the "ext" field.
func ExtGTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExt), v))
	})
}

// ExtLT applies the LT predicate on the "ext" field.
func ExtLT(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExt), v))
	})
}

// ExtLTE applies the LTE predicate on the "ext" field.
func ExtLTE(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExt), v))
	})
}

// ExtContains applies the Contains predicate on the "ext" field.
func ExtContains(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExt), v))
	})
}

// ExtHasPrefix applies the HasPrefix predicate on the "ext" field.
func ExtHasPrefix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExt), v))
	})
}

// ExtHasSuffix applies the HasSuffix predicate on the "ext" field.
func ExtHasSuffix(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExt), v))
	})
}

// ExtIsNil applies the IsNil predicate on the "ext" field.
func ExtIsNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExt)))
	})
}

// ExtNotNil applies the NotNil predicate on the "ext" field.
func ExtNotNil() predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExt)))
	})
}

// ExtEqualFold applies the EqualFold predicate on the "ext" field.
func ExtEqualFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExt), v))
	})
}

// ExtContainsFold applies the ContainsFold predicate on the "ext" field.
func ExtContainsFold(v string) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dept) predicate.Dept {
	return predicate.Dept(func(s *sql.Selector) {
		p(s.Not())
	})
}
